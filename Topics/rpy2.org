Python is a great general-purpose language with libraries to do just about
anything -- connect to databases, use web services, make graphical interfaces,
whatever. But R has CRAN, with every statistical method imaginable implemented
in a package somewhere. If you're writing Python code, it can be frustrating to
find a CRAN package with no Python equivalent.

[[https://rpy2.bitbucket.io/][rpy2]] is a Python library that lets you call R directly from inside Python. The
[[https://rpy2.github.io/doc/v2.9.x/html/index.html][documentation]] is incomplete and unclear, but the basics are straightforward.

* Examples

  We can load R packages (like the built-in =base= and =stats= packages) easily:

  #+BEGIN_SRC python
    import rpy2.robjects as robjects
    from rpy2.robjects.packages import importr
    base = importr("base")
    stats = importr("stats")
  #+END_SRC

  We can run code with the =robjects.r= method and get its results:

  #+BEGIN_SRC python
    result = robjects.r("""
    foo <- function(x, y) { x + y}
    foo(3, 4)""")
  #+END_SRC

  If we want to create R data, we can do so explicitly:

  #+BEGIN_SRC python
  xs = robjects.FloatVector([1, 2, 3, 4, 5])
  #+END_SRC

  but it's easier to do so with R functions:

  #+BEGIN_SRC python
  xs = robjects.r("1:5")
  #+END_SRC

  And you can call R functions directly:

  #+BEGIN_SRC python
  robjects.r['sort'](xs, decreasing=True)
  #+END_SRC

  which will return an R vector.

  There's a lot more -- you can use rpy2 to generate R graphics, you can access
  R objects and classes, work with data frames and types, use R packages, and so
  on. Check the [[https://rpy2.github.io/doc/v2.9.x/html/index.html][documentation]] for more details.
