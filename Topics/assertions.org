
An assertion is a statement that a condition is true.

Assertions are intended to state conditions that are expected
to always be true, and an assertion failure usually leads
to program termination. If the assertion is true, nothing happens.

A couple quick examples:

#+BEGIN_SRC R
  library(assertthat)

  foo <- function(x) {
      assert_that(x >= 0)
      # ... do stuff with x
  }
#+END_SRC

#+BEGIN_SRC C++
  #include <cassert>

  int adjust(int base, int increment) {
      assert(base >= 0);
      assert(increment % 2 == 0);
      // ...
  }
#+END_SRC

Assertions inside functions add overhead, since the condition must be checked
every time the code runs. Hence assertions are sometimes disabled once
development is complete and the code is in use.

(Example: In C++, simply defining a macro =NDEBUG= disables all assertions.)

* What are assertions for?

  Assertions are a debugging aid. They are used to help the programmer
  detect and fix bugs (conditions that should not occur) and verify
  that the underlying assumptions remain true.

  For example, while working on a function to fit a complicated model, you may
  know that certain parameters must remain in a certain range if the model is
  fit correctly. If you add assertions, you will catch errors in your code
  before they give you nonsense results:

  #+BEGIN_SRC python
    def fit(data, ...):

        for it in range(max_iterations):
            # iterative fitting code here
            ...

            # Plausibility check
            assert np.all(alpha >= 0), "negative alpha"
            assert np.all(theta >= 0), "negative theta"
            assert omega > 0, "Nonpositive omega"
            assert eta2 > 0, "Nonpositive eta2"
            assert sigma2 > 0, "Nonpositive sigma2"

        ...
  #+END_SRC

  In this same model fitting algorithm, you might know that the log-likelihood
  is guaranteed to increase at each iteration -- if it does not, something is
  wrong with your code. This could be an assertion.

  In general, if you find yourself thinking something like "I need to calculate
  this quantity, but I'm pretty sure this variable will always be /[something]/,
  so I can just do /[something else]/ instead", that's an assertion which can be
  written into the code to catch if your assumption is wrong.

  Assertions are not a substitute for error handling. They are /not/, for
  instance, intended to detect and handle erronous input or a bad program state
  that is not /due/ to a bug in the program.

  In =fit=, for example, we can't recover from =omega < 0=. It's impossible, so if
  it happens, our code is wrong. There is nothing sensible to do to fix it.

  (However, in languages meant to be used interactively, like R, they are often
  used to catch when users call functions in incorrect ways.)

  Assertions provide both run-time checking (especially during development)
  and also a simple documentation of the underlying assumptions.

  R users can use the [[https://cran.r-project.org/package=assertthat][assertthat]] package; Python has the =assert= statement built
  in to the language, as do some other languages.

* How are assertions different from tests?

  Assertions seem similar to unit tests: a unit test asserts that a function
  does a certain thing, right?

  While this is true, we use assertions for more than just testing.

  A unit test provides a function certain inputs and makes sure the outputs are
  correct. Unit tests exist /outside/ the function, calling it in different ways
  to check its overall behavior.

  But we write assertions /inside/ functions, verifying that certain conditions
  are always true.

  There is another common idiom we often see assertions use for: checking the
  inputs and outputs of a function to make sure they meet a /contract/.

* Design by Contract

  This is a design methodology where programmers define precise and
  verifiable specifications for software components. The contract is
  useful for both debugging and documentation.

  Design by contract is based on the metaphor of a legal contract
  between two parties defining the obligations embodied in a
  transaction (e.g., function call).

  The main ingredients of a contract (usually at the function or class level)
  are

   + preconditions   :: a condition that should be true just prior to execution
   + postconditions  :: a condition that should be true immediately after
                        execution
   + invariants      :: a condition that should be true during execution
   + side effects    :: modified state or observable interaction with the
                        outside world
   + error           :: error conditions that can occur
   + returns         :: values, types, meaning returned
   + guarantees      :: performance (time or space), validity (ACID), etc.

  The first three are the most commonly used. Some languages, like Eiffel and
  Racket, have sophisticated built-in contract systems:

  #+BEGIN_SRC racket
    (define/contract (foo x y)
      (-> positive? positive? positive?)
      (+ (* x x) (* y y)))
  #+END_SRC

  This defines =foo= to have a contract that its arguments are positive and it
  returns a positive number. If we violate the contract, Racket tells us what
  code is to blame -- the calling code, in this case:

  #+BEGIN_EXAMPLE
    (foo -2 3)

    foo: contract violation
      expected: positive?
      given: -2
      in: the 1st argument of
          (-> positive? positive? positive?)
      contract from: (function foo)
      blaming: main
       (assuming the contract is correct)
      at: bad-code.rkt:3.14
  #+END_EXAMPLE

  You can add contracts to Python with an extra module:

  #+BEGIN_SRC python
    from contracts import contract

    @contract(lines='list(str)',
              returns='dict(str: (int,>=1))')
    def word_count(lines):
        result = {}

        for line in lines:
            for word in line.split():
                result[word] = result.get(word, 0) + 1

        return result
  #+END_SRC

  In some implementations, new types of contracts can be defined separately and
  reused:

  #+BEGIN_SRC python
    from contracts import contract, new_contract

    @new_contract
    def even(x):
        if x % 2 != 0:
            msg = 'The number %s is not even.' % x
            raise ValueError(msg)

        # do stuff
        ...

    @contract(x='int,even')
    def foo(x):
        pass

    foo(2)
    foo(3)

    contracts.interface.ContractNotRespected: Breach for argument 'x' to foo().
    The number 3 is not even.
    checking: callable()   for value: Instance of int: 3
    checking: even         for value: Instance of int: 3
    checking: int,even     for value: Instance of int: 3
    Variables bound in inner context:
    - args: Instance of tuple: ()
    - kwargs: Instance of dict: {}
  #+END_SRC

  Other languages take this to an extreme: SPARK (based on Ada) analyzes each
  function and tries to logically prove that it satisfies the specified
  contract, and will throw an error if the function won't satisfy the contract.
  This can be done without even running the code.

  In languages without built-in contracts, like R, we can use assertions inside
  functions to check pre- and post-conditions when the code runs. These don't
  give such elegant error messages, but serve the same purpose. Many R users
  use assertions primarily for pre-condition checks, and the =assertthat= package
  is designed for this.

** A brief exercise

   Suppose you have a function =shortest_path(graph, start_node, end_node)= which
   is intended to calculate the shortest path between two nodes in an undirected
   graph. Write a contract specifying the pre- and post-conditions the function
   must satisfy.

   You can write informally, such as just saying "=graph= must be a graph object,
   and =start_node= must be a...", instead of using a specific syntax.

   Assume you have a range of useful functions like =is_graph=, =is_node=,
   =graph_contains_node=, and so on.

   What conditions did you specify?

*** Solutions
    1. Test that the final path's edges are in the =graph=. Could have a
       =edge_in_graph(edge, graph)=
    2. Precondition that there must be a path -- or otherwise define what should
       happen if there is no path
    3. Check that the output path is actually the shortest path; =is_shortest_path=
       function? May be expensive, to be done in a unit test instead
    4. Precondition: =start_node= and =end_node= are in the graph
    5. Postcondition: no cycles in returned path
    6. If it's a directed graph, output path must follow arrows
    7. Could output path as a subgraph -- must also satisfy =is_graph=
    8. Postcondition: path starts at =start_node= and ends at =end_node=
