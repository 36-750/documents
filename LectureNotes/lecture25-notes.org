#+TITLE: Proof Assistants
#+SUBTITLE: Lecture 25
#+DATE: Tue 03 Dec 2024

* Motivation

  Load the function =add2= from files =add2.py= or =add2.r=
  *without looking at the code*.

  The function =add2(x, y)= is supposed to add two integers
  =x= and =y=. How would you test/validate this? Try it.

* Proof over Tests?

  Write the function =leftpad : Int -> a -> List a -> List a=.
  (You can specialize this to strings if you like:
   =leftpad : Int -> Char -> String -> String=.)

  #+begin_example
    leftpad(5, '@', "foo")
    #=> @@foo

    leftpad(5, '@', "foobar")
    #=> foobar

    leftpad(7, '@', "foobar")
    #=> @foobar
  #+end_example

  This satisfies three properties:

  1. The length of =leftpad(n, c, s)= is max(n, len(s))

  2. The suffix of the output is the original string s.

  3. The prefix of the output consists of only padding
     characters or is empty.

  How can we prove that your code is correct?

* Propositions as Types

  #+begin_src agda
    data ℕ : Set where
      zero : ℕ
      suc  : ℕ → ℕ

    _+_ : ℕ → ℕ → ℕ
    zero + n = n
    (suc m) + n = suc (m + n)

    _ : 2 + 3 ≡ 5
    _ =
      begin
        2 + 3
      ≡⟨⟩    -- is shorthand for
        (suc (suc zero)) + (suc (suc (suc zero)))
      ≡⟨⟩    -- inductive case
        suc ((suc zero) + (suc (suc (suc zero))))
      ≡⟨⟩    -- inductive case
        suc (suc (zero + (suc (suc (suc zero)))))
      ≡⟨⟩    -- base case
        suc (suc (suc (suc (suc zero))))
      ≡⟨⟩    -- is longhand for
        5
      ∎
  #+end_src

  We can actually shorten this

  #+begin_src agda
    _ : 2 + 3 ≡ 5
    _ =
      begin
        2 + 3
      ≡⟨⟩
        suc (1 + 3)
      ≡⟨⟩
        suc (suc (0 + 3))
      ≡⟨⟩
        suc (suc 3)
      ≡⟨⟩
        5
      ∎
  #+end_src

  The key thing to observe in both cases is that we have given an
  expression (for an anonymous value `_`) *and* a type. The *type* is
  the proposition that we are proving. The proof here is a *witness*
  that the type is inhabited! Propositions as types!
   
  In reality, Agda can do some simplification for us; it knows how to
  do the simple arithmetic and can tell that both sides are actually
  the same. So this would suffice in practice:

  #+begin_src agda
    _ : 2 + 3 ≡ 5
    _ = refl
  #+end_src

  A binary relation is _reflexive_ if every value relates to itself.  
  A witness that a value is equal to itself is written =refl=.
  
* Detour: Practice with Tactics

  https://adam.math.hhu.de/#/

* Back to leftpad

  https://github.com/hwayne/lets-prove-leftpad

* Resources
